/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_THREAD_ARGS_H
#define EDGER8R_THREAD_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
/* There were no user includes. */

/**** User defined types in EDL. ****/
/* There were no user defined types. */

/**** ECALL marshalling structs. ****/
typedef struct _cb_test_waiter_thread_impl_args_t
{
    oe_result_t _result;
} cb_test_waiter_thread_impl_args_t;

typedef struct _cb_test_signal_thread_impl_args_t
{
    oe_result_t _result;
} cb_test_signal_thread_impl_args_t;

typedef struct _enc_test_mutex_args_t
{
    oe_result_t _result;
} enc_test_mutex_args_t;

typedef struct _enc_test_mutex_counts_args_t
{
    oe_result_t _result;
    size_t* count1;
    size_t* count2;
} enc_test_mutex_counts_args_t;

typedef struct _enc_wait_args_t
{
    oe_result_t _result;
    size_t num_threads;
} enc_wait_args_t;

typedef struct _enc_signal_args_t
{
    oe_result_t _result;
} enc_signal_args_t;

typedef struct _enc_wait_for_exclusive_access_args_t
{
    oe_result_t _result;
} enc_wait_for_exclusive_access_args_t;

typedef struct _enc_relinquish_exclusive_access_args_t
{
    oe_result_t _result;
} enc_relinquish_exclusive_access_args_t;

typedef struct _enc_lock_and_unlock_mutexes_args_t
{
    oe_result_t _result;
    char* mutex_ids;
    size_t mutex_ids_len;
} enc_lock_and_unlock_mutexes_args_t;

typedef struct _enc_test_tcs_exhaustion_args_t
{
    oe_result_t _result;
    size_t tcs_req_count;
} enc_test_tcs_exhaustion_args_t;

typedef struct _enc_tcs_used_thread_count_args_t
{
    oe_result_t _result;
    size_t _retval;
} enc_tcs_used_thread_count_args_t;

typedef struct _enc_reader_thread_impl_args_t
{
    oe_result_t _result;
} enc_reader_thread_impl_args_t;

typedef struct _enc_writer_thread_impl_args_t
{
    oe_result_t _result;
} enc_writer_thread_impl_args_t;

typedef struct _enc_rw_results_args_t
{
    oe_result_t _result;
    size_t* readers;
    size_t* writers;
    size_t* max_readers;
    size_t* max_writers;
    bool* readers_and_writers;
} enc_rw_results_args_t;

/**** OCALL marshalling structs. ****/
typedef struct _host_usleep_args_t
{
    oe_result_t _result;
    size_t microseconds;
} host_usleep_args_t;

typedef struct _host_tcs_out_thread_count_args_t
{
    oe_result_t _result;
    size_t _retval;
} host_tcs_out_thread_count_args_t;

/**** Trusted function IDs ****/
enum
{
    thread_fcn_id_cb_test_waiter_thread_impl = 0,
    thread_fcn_id_cb_test_signal_thread_impl = 1,
    thread_fcn_id_enc_test_mutex = 2,
    thread_fcn_id_enc_test_mutex_counts = 3,
    thread_fcn_id_enc_wait = 4,
    thread_fcn_id_enc_signal = 5,
    thread_fcn_id_enc_wait_for_exclusive_access = 6,
    thread_fcn_id_enc_relinquish_exclusive_access = 7,
    thread_fcn_id_enc_lock_and_unlock_mutexes = 8,
    thread_fcn_id_enc_test_tcs_exhaustion = 9,
    thread_fcn_id_enc_tcs_used_thread_count = 10,
    thread_fcn_id_enc_reader_thread_impl = 11,
    thread_fcn_id_enc_writer_thread_impl = 12,
    thread_fcn_id_enc_rw_results = 13,
    thread_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{
    thread_fcn_id_host_usleep = 0,
    thread_fcn_id_host_tcs_out_thread_count = 1,
    thread_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_THREAD_ARGS_H
