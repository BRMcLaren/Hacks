/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_THREAD_U_H
#define EDGER8R_THREAD_U_H

#include <openenclave/host.h>

#include "thread_args.h"

OE_EXTERNC_BEGIN

oe_result_t oe_create_thread_enclave(
    const char* path,
    oe_enclave_type_t type,
    uint32_t flags,
#ifdef OE_CONTEXT_SWITCHLESS_EXPERIMENTAL_FEATURE
    const oe_enclave_config_t* configs,
    uint32_t config_count,
#else
    const void* config,
    uint32_t config_size,
#endif
    oe_enclave_t** enclave);

/**** ECALL prototypes. ****/
oe_result_t cb_test_waiter_thread_impl(oe_enclave_t* enclave);

oe_result_t cb_test_signal_thread_impl(oe_enclave_t* enclave);

oe_result_t enc_test_mutex(oe_enclave_t* enclave);

oe_result_t enc_test_mutex_counts(
    oe_enclave_t* enclave,
    size_t* count1,
    size_t* count2);

oe_result_t enc_wait(
    oe_enclave_t* enclave,
    size_t num_threads);

oe_result_t enc_signal(oe_enclave_t* enclave);

oe_result_t enc_wait_for_exclusive_access(oe_enclave_t* enclave);

oe_result_t enc_relinquish_exclusive_access(oe_enclave_t* enclave);

oe_result_t enc_lock_and_unlock_mutexes(
    oe_enclave_t* enclave,
    const char* mutex_ids);

oe_result_t enc_test_tcs_exhaustion(
    oe_enclave_t* enclave,
    size_t tcs_req_count);

oe_result_t enc_tcs_used_thread_count(
    oe_enclave_t* enclave,
    size_t* _retval);

oe_result_t enc_reader_thread_impl(oe_enclave_t* enclave);

oe_result_t enc_writer_thread_impl(oe_enclave_t* enclave);

oe_result_t enc_rw_results(
    oe_enclave_t* enclave,
    size_t* readers,
    size_t* writers,
    size_t* max_readers,
    size_t* max_writers,
    bool* readers_and_writers);

/**** OCALL prototypes. ****/
void host_usleep(size_t microseconds);

size_t host_tcs_out_thread_count(void);

OE_EXTERNC_END

#endif // EDGER8R_THREAD_U_H
