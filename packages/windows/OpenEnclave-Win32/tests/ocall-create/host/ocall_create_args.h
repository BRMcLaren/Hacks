/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_OCALL_CREATE_ARGS_H
#define EDGER8R_OCALL_CREATE_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
/* There were no user includes. */

/**** User defined types in EDL. ****/
/* There were no user defined types. */

/**** ECALL marshalling structs. ****/
typedef struct _enc_double_args_t
{
    oe_result_t _result;
    int _retval;
    int val;
} enc_double_args_t;

typedef struct _enc_double_ocall_args_t
{
    oe_result_t _result;
    int _retval;
    int val;
} enc_double_ocall_args_t;

typedef struct _enc_create_enclave_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    char* path;
    size_t path_len;
    oe_enclave_type_t type;
    uint32_t flags;
    oe_enclave_t** enclave_out;
} enc_create_enclave_args_t;

typedef struct _enc_test_ocall_enclave_args_t
{
    oe_result_t _result;
    int _retval;
    char* path;
    size_t path_len;
    uint32_t flag;
} enc_test_ocall_enclave_args_t;

/**** OCALL marshalling structs. ****/
typedef struct _host_double_args_t
{
    oe_result_t _result;
    int _retval;
    int val;
} host_double_args_t;

typedef struct _host_create_enclave_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    char* path;
    size_t path_len;
    oe_enclave_type_t type;
    uint32_t flags;
    oe_enclave_t** enclave_out;
} host_create_enclave_args_t;

typedef struct _host_call_enc_double_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_enclave_t* _enclave;
    int* ret_val;
    int val;
} host_call_enc_double_args_t;

typedef struct _host_call_enc_double_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_enclave_t* _enclave;
    int* ret_val;
    int val;
} host_call_enc_double_ocall_args_t;

typedef struct _host_terminate_enclave_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_enclave_t* _enclave;
} host_terminate_enclave_args_t;

/**** Trusted function IDs ****/
enum
{
    ocall_create_fcn_id_enc_double = 0,
    ocall_create_fcn_id_enc_double_ocall = 1,
    ocall_create_fcn_id_enc_create_enclave = 2,
    ocall_create_fcn_id_enc_test_ocall_enclave = 3,
    ocall_create_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{
    ocall_create_fcn_id_host_double = 0,
    ocall_create_fcn_id_host_create_enclave = 1,
    ocall_create_fcn_id_host_call_enc_double = 2,
    ocall_create_fcn_id_host_call_enc_double_ocall = 3,
    ocall_create_fcn_id_host_terminate_enclave = 4,
    ocall_create_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_OCALL_CREATE_ARGS_H
