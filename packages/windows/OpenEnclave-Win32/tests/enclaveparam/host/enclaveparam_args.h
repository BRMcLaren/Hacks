/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_ENCLAVEPARAM_ARGS_H
#define EDGER8R_ENCLAVEPARAM_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
/* There were no user includes. */

/**** User defined types in EDL. ****/
/* There were no user defined types. */

/**** ECALL marshalling structs. ****/
typedef struct _test_ocall_enclave_param_args_t
{
    oe_result_t _result;
    char* func;
    size_t func_len;
} test_ocall_enclave_param_args_t;

/**** OCALL marshalling structs. ****/
typedef struct _callback_1_args_t
{
    oe_result_t _result;
    oe_enclave_t* enclaveParam;
} callback_1_args_t;

typedef struct _callback_2_args_t
{
    oe_result_t _result;
    oe_enclave_t* enclaveParam;
} callback_2_args_t;

typedef struct _callback_3_args_t
{
    oe_result_t _result;
    oe_enclave_t* enclaveParam;
} callback_3_args_t;

/**** Trusted function IDs ****/
enum
{
    enclaveparam_fcn_id_test_ocall_enclave_param = 0,
    enclaveparam_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{
    enclaveparam_fcn_id_callback_1 = 0,
    enclaveparam_fcn_id_callback_2 = 1,
    enclaveparam_fcn_id_callback_3 = 2,
    enclaveparam_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_ENCLAVEPARAM_ARGS_H
