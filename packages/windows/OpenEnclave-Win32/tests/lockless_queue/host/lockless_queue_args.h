/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_LOCKLESS_QUEUE_ARGS_H
#define EDGER8R_LOCKLESS_QUEUE_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
#include "openenclave/internal/lockless_queue.h"

/**** User defined types in EDL. ****/
typedef enum constants
{
    TEST_COUNT = 1024,
    THREAD_COUNT = 5
} constants;

typedef struct test_node
{
    oe_lockless_queue_node _node;
    size_t count;
    size_t pop_order;
} test_node;

/**** ECALL marshalling structs. ****/
typedef struct _enc_push_nodes_args_t
{
    oe_result_t _result;
    oe_lockless_queue* p_queue;
    test_node* p_nodes;
    size_t count;
} enc_push_nodes_args_t;

typedef struct _enc_writer_thread_args_t
{
    oe_result_t _result;
    oe_lockless_queue* p_queue;
    test_node* p_nodes;
    size_t* p_barrier;
} enc_writer_thread_args_t;

typedef struct _enc_pop_nodes_args_t
{
    oe_result_t _result;
    oe_lockless_queue* p_queue;
    size_t count;
} enc_pop_nodes_args_t;

typedef struct _enc_test_queue_single_threaded_args_t
{
    oe_result_t _result;
} enc_test_queue_single_threaded_args_t;

/**** OCALL marshalling structs. ****/
/* There were no ocalls. */

/**** Trusted function IDs ****/
enum
{
    lockless_queue_fcn_id_enc_push_nodes = 0,
    lockless_queue_fcn_id_enc_writer_thread = 1,
    lockless_queue_fcn_id_enc_pop_nodes = 2,
    lockless_queue_fcn_id_enc_test_queue_single_threaded = 3,
    lockless_queue_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{

    lockless_queue_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_LOCKLESS_QUEUE_ARGS_H
