# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget openenclave::oehost openenclave::oehostapp openenclave::oehostverify openenclave::oe_includes openenclave::oesign openenclave::oecore openenclave::oecryptombed openenclave::oeenclave openenclave::libcxx openenclave::libcxxrt openenclave::libunwind openenclave::oelibc_includes openenclave::mbedcrypto_static openenclave::mbedx509 openenclave::mbedtls openenclave::mbedcrypto openenclave::oelibc openenclave::oelibasm openenclave::oelibcxx openenclave::oesyscall openenclave::oehostfs openenclave::oehostresolver openenclave::oehostsock openenclave::oehostepoll openenclave::oedebugrt)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target openenclave::oehost
add_library(openenclave::oehost STATIC IMPORTED)

set_target_properties(openenclave::oehost PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oe_includes;ws2_32;\$<LINK_ONLY:bcrypt>;\$<LINK_ONLY:Crypt32>"
)

# Create imported target openenclave::oehostapp
add_library(openenclave::oehostapp INTERFACE IMPORTED)

set_target_properties(openenclave::oehostapp PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oehost"
)

# Create imported target openenclave::oehostverify
add_library(openenclave::oehostverify STATIC IMPORTED)

set_target_properties(openenclave::oehostverify PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<TARGET_PROPERTY:openenclave::oehost,INTERFACE_COMPILE_DEFINITIONS>"
  INTERFACE_COMPILE_OPTIONS "\$<TARGET_PROPERTY:openenclave::oehost,INTERFACE_COMPILE_OPTIONS>"
  INTERFACE_LINK_LIBRARIES "openenclave::oe_includes;\$<LINK_ONLY:bcrypt>;\$<LINK_ONLY:Crypt32>"
)

# Create imported target openenclave::oe_includes
add_library(openenclave::oe_includes INTERFACE IMPORTED)

set_target_properties(openenclave::oe_includes PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target openenclave::oesign
add_executable(openenclave::oesign IMPORTED)

# Create imported target openenclave::oecore
add_library(openenclave::oecore STATIC IMPORTED)

set_target_properties(openenclave::oecore PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "OE_BUILD_ENCLAVE"
  INTERFACE_COMPILE_OPTIONS "-m64;-fPIE;-nostdinc;-fno-stack-protector;-fvisibility=hidden;-ftls-model=local-exec;\$<\$<COMPILE_LANGUAGE:CXX>:-nostdinc++>"
  INTERFACE_LINK_LIBRARIES "openenclave::oe_includes;-nostdlib;-nodefaultlibs;-nostartfiles;-Wl,--no-undefined,-Bstatic,-Bsymbolic,--export-dynamic,-pie,--build-id;-Wl,-z,noexecstack;-Wl,-z,now"
)

# Create imported target openenclave::oecryptombed
add_library(openenclave::oecryptombed STATIC IMPORTED)

set_target_properties(openenclave::oecryptombed PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::mbedcrypto"
)

# Create imported target openenclave::oeenclave
add_library(openenclave::oeenclave STATIC IMPORTED)

set_target_properties(openenclave::oeenclave PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oecryptombed"
)

# Create imported target openenclave::libcxx
add_library(openenclave::libcxx INTERFACE IMPORTED)

set_target_properties(openenclave::libcxx PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oelibc"
)

# Create imported target openenclave::libcxxrt
add_library(openenclave::libcxxrt INTERFACE IMPORTED)

set_target_properties(openenclave::libcxxrt PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oelibc"
)

# Create imported target openenclave::libunwind
add_library(openenclave::libunwind INTERFACE IMPORTED)

set_target_properties(openenclave::libunwind PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oelibc"
)

# Create imported target openenclave::oelibc_includes
add_library(openenclave::oelibc_includes INTERFACE IMPORTED)

set_target_properties(openenclave::oelibc_includes PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "\$<\$<COMPILE_LANGUAGE:CXX>:${_IMPORT_PREFIX}/include/openenclave/3rdparty/libcxx>;${_IMPORT_PREFIX}/include/openenclave/3rdparty/libc"
)

# Create imported target openenclave::mbedcrypto_static
add_library(openenclave::mbedcrypto_static STATIC IMPORTED)

set_target_properties(openenclave::mbedcrypto_static PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/openenclave/3rdparty"
  INTERFACE_LINK_LIBRARIES "openenclave::oelibc;openenclave::oe_includes"
)

# Create imported target openenclave::mbedx509
add_library(openenclave::mbedx509 STATIC IMPORTED)

set_target_properties(openenclave::mbedx509 PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::mbedcrypto_static"
)

# Create imported target openenclave::mbedtls
add_library(openenclave::mbedtls STATIC IMPORTED)

set_target_properties(openenclave::mbedtls PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::mbedx509"
)

# Create imported target openenclave::mbedcrypto
add_library(openenclave::mbedcrypto INTERFACE IMPORTED)

set_target_properties(openenclave::mbedcrypto PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::mbedtls"
)

# Create imported target openenclave::oelibc
add_library(openenclave::oelibc STATIC IMPORTED)

set_target_properties(openenclave::oelibc PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oesyscall;openenclave::oecore;openenclave::oelibc_includes;\$<LINK_ONLY:openenclave::oelibasm>"
)

# Create imported target openenclave::oelibasm
add_library(openenclave::oelibasm INTERFACE IMPORTED)

# Create imported target openenclave::oelibcxx
add_library(openenclave::oelibcxx STATIC IMPORTED)

set_target_properties(openenclave::oelibcxx PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::libcxx;openenclave::libcxxrt;openenclave::libunwind"
)

# Create imported target openenclave::oesyscall
add_library(openenclave::oesyscall STATIC IMPORTED)

set_target_properties(openenclave::oesyscall PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oecore"
)

# Create imported target openenclave::oehostfs
add_library(openenclave::oehostfs STATIC IMPORTED)

set_target_properties(openenclave::oehostfs PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oesyscall"
)

# Create imported target openenclave::oehostresolver
add_library(openenclave::oehostresolver STATIC IMPORTED)

set_target_properties(openenclave::oehostresolver PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oesyscall"
)

# Create imported target openenclave::oehostsock
add_library(openenclave::oehostsock STATIC IMPORTED)

set_target_properties(openenclave::oehostsock PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oesyscall"
)

# Create imported target openenclave::oehostepoll
add_library(openenclave::oehostepoll STATIC IMPORTED)

set_target_properties(openenclave::oehostepoll PROPERTIES
  INTERFACE_LINK_LIBRARIES "openenclave::oesyscall"
)

# Create imported target openenclave::oedebugrt
add_library(openenclave::oedebugrt SHARED IMPORTED)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/openenclave-targets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
