/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_TEE_ARGS_H
#define EDGER8R_TEE_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
#include "openenclave/bits/types.h"

/**** User defined types in EDL. ****/
/* There were no user defined types. */

/**** ECALL marshalling structs. ****/
typedef struct _oe_log_init_ecall_args_t
{
    oe_result_t _result;
    char* enclave_path;
    size_t enclave_path_len;
    uint32_t log_level;
} oe_log_init_ecall_args_t;

typedef struct _oe_verify_report_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* report;
    size_t report_size;
} oe_verify_report_ecall_args_t;

typedef struct _oe_get_public_key_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_asymmetric_key_params_t* key_params;
    void* key_info;
    size_t key_info_size;
    void* key_buffer;
    size_t key_buffer_size;
    size_t* key_buffer_size_out;
} oe_get_public_key_ecall_args_t;

typedef struct _oe_get_public_key_by_policy_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    uint32_t seal_policy;
    oe_asymmetric_key_params_t* key_params;
    void* key_buffer;
    size_t key_buffer_size;
    size_t* key_buffer_size_out;
    void* key_info;
    size_t key_info_size;
    size_t* key_info_size_out;
} oe_get_public_key_by_policy_ecall_args_t;

/**** OCALL marshalling structs. ****/
typedef struct _oe_log_ocall_args_t
{
    oe_result_t _result;
    uint32_t log_level;
    char* message;
    size_t message_len;
} oe_log_ocall_args_t;

typedef struct _oe_realloc_ocall_args_t
{
    oe_result_t _result;
    void* _retval;
    void* ptr;
    size_t size;
} oe_realloc_ocall_args_t;

typedef struct _oe_write_ocall_args_t
{
    oe_result_t _result;
    int device;
    char* str;
    size_t str_len;
    size_t maxlen;
} oe_write_ocall_args_t;

/**** Trusted function IDs ****/
enum
{
    tee_fcn_id_oe_log_init_ecall = 0,
    tee_fcn_id_oe_verify_report_ecall = 1,
    tee_fcn_id_oe_get_public_key_ecall = 2,
    tee_fcn_id_oe_get_public_key_by_policy_ecall = 3,
    tee_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{
    tee_fcn_id_oe_log_ocall = 0,
    tee_fcn_id_oe_realloc_ocall = 1,
    tee_fcn_id_oe_write_ocall = 2,
    tee_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_TEE_ARGS_H
