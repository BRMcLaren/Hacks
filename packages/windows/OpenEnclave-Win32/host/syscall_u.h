/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_SYSCALL_U_H
#define EDGER8R_SYSCALL_U_H

#include <openenclave/host.h>

#include "syscall_args.h"

OE_EXTERNC_BEGIN

oe_result_t oe_create_syscall_enclave(
    const char* path,
    oe_enclave_type_t type,
    uint32_t flags,
#ifdef OE_CONTEXT_SWITCHLESS_EXPERIMENTAL_FEATURE
    const oe_enclave_config_t* configs,
    uint32_t config_count,
#else
    const void* config,
    uint32_t config_size,
#endif
    oe_enclave_t** enclave);

/**** ECALL prototypes. ****/
oe_result_t oe_syscall_stub_ecall(oe_enclave_t* enclave);

/**** OCALL prototypes. ****/
int oe_syscall_uname_ocall(struct oe_utsname* buf);

oe_host_fd_t oe_syscall_open_ocall(
    const char* pathname,
    int flags,
    oe_mode_t mode);

ssize_t oe_syscall_read_ocall(
    oe_host_fd_t fd,
    void* buf,
    size_t count);

ssize_t oe_syscall_write_ocall(
    oe_host_fd_t fd,
    const void* buf,
    size_t count);

ssize_t oe_syscall_readv_ocall(
    oe_host_fd_t fd,
    void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

ssize_t oe_syscall_writev_ocall(
    oe_host_fd_t fd,
    const void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

oe_off_t oe_syscall_lseek_ocall(
    oe_host_fd_t fd,
    oe_off_t offset,
    int whence);

int oe_syscall_close_ocall(oe_host_fd_t fd);

int oe_syscall_close_socket_ocall(oe_host_fd_t sockfd);

oe_host_fd_t oe_syscall_dup_ocall(oe_host_fd_t oldfd);

uint64_t oe_syscall_opendir_ocall(const char* name);

int oe_syscall_readdir_ocall(
    uint64_t dirp,
    struct oe_dirent* entry);

void oe_syscall_rewinddir_ocall(uint64_t dirp);

int oe_syscall_closedir_ocall(uint64_t dirp);

int oe_syscall_stat_ocall(
    const char* pathname,
    struct oe_stat* buf);

int oe_syscall_access_ocall(
    const char* pathname,
    int mode);

int oe_syscall_link_ocall(
    const char* oldpath,
    const char* newpath);

int oe_syscall_unlink_ocall(const char* pathname);

int oe_syscall_rename_ocall(
    const char* oldpath,
    const char* newpath);

int oe_syscall_truncate_ocall(
    const char* path,
    oe_off_t length);

int oe_syscall_mkdir_ocall(
    const char* pathname,
    oe_mode_t mode);

int oe_syscall_rmdir_ocall(const char* pathname);

oe_host_fd_t oe_syscall_socket_ocall(
    int domain,
    int type,
    int protocol);

int oe_syscall_socketpair_ocall(
    int domain,
    int type,
    int protocol,
    oe_host_fd_t sv[2]);

int oe_syscall_connect_ocall(
    oe_host_fd_t sockfd,
    const struct oe_sockaddr* addr,
    oe_socklen_t addrlen);

oe_host_fd_t oe_syscall_accept_ocall(
    oe_host_fd_t sockfd,
    struct oe_sockaddr* addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

int oe_syscall_bind_ocall(
    oe_host_fd_t sockfd,
    const struct oe_sockaddr* addr,
    oe_socklen_t addrlen);

int oe_syscall_listen_ocall(
    oe_host_fd_t sockfd,
    int backlog);

ssize_t oe_syscall_recvmsg_ocall(
    oe_host_fd_t sockfd,
    void* msg_name,
    oe_socklen_t msg_namelen,
    oe_socklen_t* msg_namelen_out,
    void* msg_iov_buf,
    size_t msg_iovlen,
    size_t msg_iov_buf_size,
    void* msg_control,
    size_t msg_controllen,
    size_t* msg_controllen_out,
    int flags);

ssize_t oe_syscall_sendmsg_ocall(
    oe_host_fd_t sockfd,
    const void* msg_name,
    oe_socklen_t msg_namelen,
    void* msg_iov_buf,
    size_t msg_iovlen,
    size_t msg_iov_buf_size,
    const void* msg_control,
    size_t msg_controllen,
    int flags);

ssize_t oe_syscall_recv_ocall(
    oe_host_fd_t sockfd,
    void* buf,
    size_t len,
    int flags);

ssize_t oe_syscall_recvfrom_ocall(
    oe_host_fd_t sockfd,
    void* buf,
    size_t len,
    int flags,
    struct oe_sockaddr* src_addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

ssize_t oe_syscall_send_ocall(
    oe_host_fd_t sockfd,
    const void* buf,
    size_t len,
    int flags);

ssize_t oe_syscall_sendto_ocall(
    oe_host_fd_t sockfd,
    const void* buf,
    size_t len,
    int flags,
    const struct oe_sockaddr* dest_addr,
    oe_socklen_t addrlen);

ssize_t oe_syscall_recvv_ocall(
    oe_host_fd_t fd,
    void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

ssize_t oe_syscall_sendv_ocall(
    oe_host_fd_t fd,
    const void* iov_buf,
    int iovcnt,
    size_t iov_buf_size);

int oe_syscall_shutdown_ocall(
    oe_host_fd_t sockfd,
    int how);

int oe_syscall_fcntl_ocall(
    oe_host_fd_t fd,
    int cmd,
    uint64_t arg,
    uint64_t argsize,
    void* argout);

int oe_syscall_ioctl_ocall(
    oe_host_fd_t fd,
    uint64_t request,
    uint64_t arg,
    uint64_t argsize,
    void* argout);

int oe_syscall_setsockopt_ocall(
    oe_host_fd_t sockfd,
    int level,
    int optname,
    const void* optval,
    oe_socklen_t optlen);

int oe_syscall_getsockopt_ocall(
    oe_host_fd_t sockfd,
    int level,
    int optname,
    void* optval,
    oe_socklen_t optlen_in,
    oe_socklen_t* optlen_out);

int oe_syscall_getsockname_ocall(
    oe_host_fd_t sockfd,
    struct oe_sockaddr* addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

int oe_syscall_getpeername_ocall(
    oe_host_fd_t sockfd,
    struct oe_sockaddr* addr,
    oe_socklen_t addrlen_in,
    oe_socklen_t* addrlen_out);

int oe_syscall_shutdown_sockets_device_ocall(oe_host_fd_t sockfd);

int oe_syscall_kill_ocall(
    int pid,
    int signum);

int oe_syscall_getaddrinfo_open_ocall(
    const char* node,
    const char* service,
    const struct oe_addrinfo* hints,
    uint64_t* handle);

int oe_syscall_getaddrinfo_read_ocall(
    uint64_t handle,
    int* ai_flags,
    int* ai_family,
    int* ai_socktype,
    int* ai_protocol,
    oe_socklen_t ai_addrlen_in,
    oe_socklen_t* ai_addrlen,
    struct oe_sockaddr* ai_addr,
    size_t ai_canonnamelen_in,
    size_t* ai_canonnamelen,
    char* ai_canonname);

int oe_syscall_getaddrinfo_close_ocall(uint64_t handle);

int oe_syscall_getnameinfo_ocall(
    const struct oe_sockaddr* sa,
    oe_socklen_t salen,
    char* host,
    oe_socklen_t hostlen,
    char* serv,
    oe_socklen_t servlen,
    int flags);

oe_host_fd_t oe_syscall_epoll_create1_ocall(int flags);

int oe_syscall_epoll_wait_ocall(
    int64_t epfd,
    struct oe_epoll_event* events,
    unsigned int maxevents,
    int timeout);

int oe_syscall_epoll_wake_ocall(void);

int oe_syscall_epoll_ctl_ocall(
    int64_t epfd,
    int op,
    int64_t fd,
    struct oe_epoll_event* event);

int oe_syscall_epoll_close_ocall(oe_host_fd_t epfd);

int oe_syscall_poll_ocall(
    struct oe_host_pollfd* host_fds,
    oe_nfds_t nfds,
    int timeout);

int oe_syscall_getpid_ocall(void);

int oe_syscall_getppid_ocall(void);

int oe_syscall_getpgrp_ocall(void);

unsigned int oe_syscall_getuid_ocall(void);

unsigned int oe_syscall_geteuid_ocall(void);

unsigned int oe_syscall_getgid_ocall(void);

unsigned int oe_syscall_getegid_ocall(void);

int oe_syscall_getpgid_ocall(int pid);

int oe_syscall_getgroups_ocall(
    size_t size,
    unsigned int* list);

OE_EXTERNC_END

#endif // EDGER8R_SYSCALL_U_H
