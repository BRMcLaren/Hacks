/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_TEE_U_H
#define EDGER8R_TEE_U_H

#include <openenclave/host.h>

#include "tee_args.h"

OE_EXTERNC_BEGIN

oe_result_t oe_create_tee_enclave(
    const char* path,
    oe_enclave_type_t type,
    uint32_t flags,
#ifdef OE_CONTEXT_SWITCHLESS_EXPERIMENTAL_FEATURE
    const oe_enclave_config_t* configs,
    uint32_t config_count,
#else
    const void* config,
    uint32_t config_size,
#endif
    oe_enclave_t** enclave);

/**** ECALL prototypes. ****/
oe_result_t oe_log_init_ecall(
    oe_enclave_t* enclave,
    const char* enclave_path,
    uint32_t log_level);

oe_result_t oe_verify_report_ecall(
    oe_enclave_t* enclave,
    oe_result_t* _retval,
    const void* report,
    size_t report_size);

oe_result_t oe_get_public_key_ecall(
    oe_enclave_t* enclave,
    oe_result_t* _retval,
    const oe_asymmetric_key_params_t* key_params,
    const void* key_info,
    size_t key_info_size,
    void* key_buffer,
    size_t key_buffer_size,
    size_t* key_buffer_size_out);

oe_result_t oe_get_public_key_by_policy_ecall(
    oe_enclave_t* enclave,
    oe_result_t* _retval,
    uint32_t seal_policy,
    const oe_asymmetric_key_params_t* key_params,
    void* key_buffer,
    size_t key_buffer_size,
    size_t* key_buffer_size_out,
    void* key_info,
    size_t key_info_size,
    size_t* key_info_size_out);

/**** OCALL prototypes. ****/
void oe_log_ocall(
    uint32_t log_level,
    const char* message);

void* oe_realloc_ocall(
    void* ptr,
    size_t size);

void oe_write_ocall(
    int device,
    const char* str,
    size_t maxlen);

OE_EXTERNC_END

#endif // EDGER8R_TEE_U_H
