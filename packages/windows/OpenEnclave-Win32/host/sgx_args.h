/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_SGX_ARGS_H
#define EDGER8R_SGX_ARGS_H

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

/* #include <errno.h> - Errno propagation not enabled so not included. */

#include <openenclave/bits/result.h>

/**** User includes. ****/
#include "openenclave/bits/types.h"
#include "openenclave/internal/sgxtypes.h"

/**** User defined types in EDL. ****/
/* There were no user defined types. */

/**** ECALL marshalling structs. ****/
typedef struct _oe_get_sgx_report_ecall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* opt_params;
    size_t opt_params_size;
    sgx_report_t* report;
} oe_get_sgx_report_ecall_args_t;

/**** OCALL marshalling structs. ****/
typedef struct _oe_get_qetarget_info_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    sgx_target_info_t* target_info;
} oe_get_qetarget_info_ocall_args_t;

typedef struct _oe_get_quote_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    sgx_report_t* sgx_report;
    void* quote;
    size_t quote_size;
    size_t* quote_size_out;
} oe_get_quote_ocall_args_t;

typedef struct _oe_get_qe_identify_info_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* qe_id_info;
    size_t qe_id_info_size;
    size_t* qe_id_info_size_out;
    void* issuer_chain;
    size_t issuer_chain_size;
    size_t* issuer_chain_size_out;
} oe_get_qe_identify_info_ocall_args_t;

typedef struct _oe_get_revocation_info_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    uint8_t* fmspc;
    size_t num_crl_urls;
    char* crl_urls0;
    size_t crl_urls0_len;
    char* crl_urls1;
    size_t crl_urls1_len;
    char* crl_urls2;
    size_t crl_urls2_len;
    void* tcb_info;
    size_t tcb_info_size;
    size_t* tcb_info_size_out;
    void* tcb_issuer_chain;
    size_t tcb_issuer_chain_size;
    size_t* tcb_issuer_chain_size_out;
    void* crl0;
    size_t crl0_size;
    size_t* crl0_size_out;
    void* crl1;
    size_t crl1_size;
    size_t* crl1_size_out;
    void* crl2;
    size_t crl2_size;
    size_t* crl2_size_out;
    void* crl_issuer_chain0;
    size_t crl_issuer_chain0_size;
    size_t* crl_issuer_chain0_size_out;
    void* crl_issuer_chain1;
    size_t crl_issuer_chain1_size;
    size_t* crl_issuer_chain1_size_out;
    void* crl_issuer_chain2;
    size_t crl_issuer_chain2_size;
    size_t* crl_issuer_chain2_size_out;
} oe_get_revocation_info_ocall_args_t;

typedef struct _oe_backtrace_symbols_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    oe_enclave_t* oe_enclave;
    uint64_t* buffer;
    size_t size;
    void* symbols_buffer;
    size_t symbols_buffer_size;
    size_t* symbols_buffer_size_out;
} oe_backtrace_symbols_ocall_args_t;

typedef struct _oe_thread_wake_wait_ocall_args_t
{
    oe_result_t _result;
    oe_enclave_t* oe_enclave;
    uint64_t waiter_tcs;
    uint64_t self_tcs;
} oe_thread_wake_wait_ocall_args_t;

typedef struct _oe_get_cpuid_table_ocall_args_t
{
    oe_result_t _result;
    oe_result_t _retval;
    void* cpuid_table_buffer;
    size_t cpuid_table_buffer_size;
} oe_get_cpuid_table_ocall_args_t;

/**** Trusted function IDs ****/
enum
{
    sgx_fcn_id_oe_get_sgx_report_ecall = 0,
    sgx_fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/**** Untrusted function IDs. ****/
enum
{
    sgx_fcn_id_oe_get_qetarget_info_ocall = 0,
    sgx_fcn_id_oe_get_quote_ocall = 1,
    sgx_fcn_id_oe_get_qe_identify_info_ocall = 2,
    sgx_fcn_id_oe_get_revocation_info_ocall = 3,
    sgx_fcn_id_oe_backtrace_symbols_ocall = 4,
    sgx_fcn_id_oe_thread_wake_wait_ocall = 5,
    sgx_fcn_id_oe_get_cpuid_table_ocall = 6,
    sgx_fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // EDGER8R_SGX_ARGS_H
